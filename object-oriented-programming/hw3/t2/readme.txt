设计思路

本程序的基本思路为用map<string, int> variants储存变量（因为所有的数字都是正整数所以以0代表false，以-1代表true），事先通过map<string, int> operatorPrecedence记录操作符的优先级，定义logic类进行主体的语句处理，将表达式转化为逆波兰式后再求值进行复制或输出，下面详细讲解重点思路。
第一个重点是输入语句头部的内容后，对表达式的转化。logic类中有两个vector<string>类型的成员变量，vector的每一项表示一个操作数或者操作符，ori储存原表达式rPol储存逆波兰式。通过stringstream可以轻松将长字符串表达式分割为vector<string>。logic::convert通过ori生成rPol。首先建立一个操作符栈opr，向其中压入底部标识符“#”，然后遍历ori，读取到操作数（不能在operatorPrecedence中找到的元素）直接放入rPol尾部，读取到操作符tmp则判断它和opr栈顶的优先级，若tmp更优先则直接压栈，否则从栈顶开始，将所有比tmp优先或者一样优先的元素出栈并放入rPol尾部。当然这其中若栈顶为“#”则结束现有操作直接压栈。遍历完ori后将opr中“#”上面的元素一次放入rPol尾部，逆波兰式构建完成。
第二个重点是计算逆波兰式的值。首先开一个操作数的栈operand，若读到操作数直接压栈，若读到运算符则让运算符对应的操作数出栈进行判断（除not是一元运算符以外，全是二元运算符）。对于是变量（在variants里面）的操作数，先将其转换为常量。对比较运算符，需要将string都转为int进行比较，而逻辑运算符直接进行字符串“True”和“False”的转换即可。将最后的结果（"True"或者"False"）压栈，直到对rPol的遍历结束，返回栈中最后一个元素。
除此之外，还用函数实现了输出类型转换等小功能，思路简单不再赘述。